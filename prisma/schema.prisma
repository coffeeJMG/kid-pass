// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  socialId     String?
  provider     String?
  userId       String   @unique
  email        String   @unique
  password     String?
  name         String
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  children     Child[]

  // socialId와 provider가 모두 있을 때만 unique 제약 적용
  @@index([socialId, provider])

  @@map("users")
}

model Record {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  childId     String   @db.ObjectId
  child       Child    @relation(fields: [childId], references: [id])
  type        String   // FEEDING, SLEEP, DIAPER 등
  // 공통 필드
  startTime   DateTime // 시작 시간
  endTime     DateTime? // 종료 시간 (선택)
  memo        String?  // 메모

  // 수유 관련
  mealType    String?  // 모유, 분유, 이유식, 혼합
  amount      Float?   // 수유량
  unit        String?  // 단위 (ml 등)

  // 기저귀 관련
  diaperType   String?  // 대변, 소변
  diaperState  String?  // 상태 (기존 필드 유지)
  diaperColor  String?  // 노란색, 갈색, 검은색, 빨간색, 흰색, 회색
  diaperShape  String?  // 물변, 딱딱함, 적당함
  diaperAmount String?  // 적음, 보통, 많음

  // 수면 관련
  sleepType    String?  // 낮잠, 밤잠

  // 체온 관련
  temperature Float?    // 체온 (36.5 등)

  // 성장 관련
  weight      Float?    // 몸무게 (kg)
  height      Float?    // 키 (cm)
  headSize    Float?    // 두위 (cm)

  // 감정 관련
  emotion     String?   // 행복해요, 활발해요, 평온해요 등
  special     String?   // 놀이를 했어요, 외출했어요 등

  // 특이증상 관련
  symptom     String?   // 수유 거부, 설사, 발진 등
  severity    String?   // 약함, 보통, 심함

  // 약 관련
  medicine    String?   // 타이레놀 시럽, 아티푸스 시럽 등

  // 기타 관련
  category    String?   // 신생아 반사행동, 성장 행동
  behavior    String[]  // 모로반사, 파악반사, 바빈스키 반사, 흡철반사, 긴장목 반사, 터미타임, 턱 들기, 가슴 들기, 물건 만지기, 기대 앉기, 물건 잡기, 앉기, 기어가기, 계단 오르기, 서기, 걷기

  // 병원 관련
  diagnoses   String?   // 감기, 코로나19, 장염, 인플루엔자, 기관지염
  hospital    String?   // 서울대학교 병원
  doctor      String?   // 김철수 선생님
  treatmentMethod String? // 처방받은 약

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("records")
}

model Child {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  birthDate        DateTime
  gender           String
  weight           Float?
  height           Float?
  headCircumference Float?
  ageType          String?
  allergies        String[]
  symptoms         String[]
  memo             String?
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  records          Record[]
  prescriptions    Prescription[]
  vacntnInfo       VacntnInfo[]

  @@map("children")
}

model VacntnInfo {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId

  // 백신 기본 정보
  vacntnId        String   // 백신 질병 ID (VACCINE_LIST의 id 참조)
  vacntnIctsd     String   // 백신 종류 코드 (DTaP, Tdap 등)

  // 접종 상태 정보
  vacntnDoseNumber Int      // 현재 접종 차수 (1차, 2차...)
  vacntnInoclDt   String    // 접종 날짜 (ISO 형식의 날짜 문자열)
  isCompleted     Boolean   @default(false)  // 접종 완료 여부
  actualDate      String?   // 실제 접종일 (선택적)

  // Child 모델과의 관계 설정
  child           Child    @relation(fields: [childId], references: [id])
  childId         String   @db.ObjectId

  // 생성/수정 시간 추적
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("vaccine_info")
}

model EmailVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Prescription {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  childId             String   @db.ObjectId
  child               Child    @relation(fields: [childId], references: [id])
  date                DateTime // 진찰 날짜
  hospital            String   // 병원 이름
  doctor              String?  // 의사 이름
  diagnoses           String?  // 진단명
  treatmentMethod     String?  // 치료 방법
  medicines           String?  // 처방 약품
  prescriptionImageUrl String? // 처방전 이미지 URL
  memo                String?  // 메모
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("prescriptions")
}